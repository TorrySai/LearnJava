/*
You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int extra = 0;
        ListNode prev = new ListNode(0);
        ListNode root = prev;
        
        while(extra != 0 || l1 != null || l2 != null)
        {
            int a = 0, b = 0;
            if(l1 != null)
            {
                a = l1.val;
                l1 = l1.next;
            }
            
            if(l2 != null)
            {
                b = l2.val;
                l2 = l2.next;
            }
            
            ListNode curNode = new ListNode((a + b + extra) % 10);
            prev.next = curNode;
            prev = curNode;
            extra = (a + b + extra) / 10;
        }
        
        return root.next;
    }
}
